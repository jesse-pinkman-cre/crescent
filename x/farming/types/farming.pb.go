// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/farming/v1beta1/farming.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PlanType enumerates the valid types of a plan.
type PlanType int32

const (
	// PLAN_TYPE_UNSPECIFIED defines the default plan type.
	PlanTypeNil PlanType = 0
	// PLAN_TYPE_PUBLIC defines the public plan type.
	PlanTypePublic PlanType = 1
	// PLAN_TYPE_PRIVATE defines the private plan type.
	PlanTypePrivate PlanType = 2
)

var PlanType_name = map[int32]string{
	0: "PLAN_TYPE_UNSPECIFIED",
	1: "PLAN_TYPE_PUBLIC",
	2: "PLAN_TYPE_PRIVATE",
}

var PlanType_value = map[string]int32{
	"PLAN_TYPE_UNSPECIFIED": 0,
	"PLAN_TYPE_PUBLIC":      1,
	"PLAN_TYPE_PRIVATE":     2,
}

func (x PlanType) String() string {
	return proto.EnumName(PlanType_name, int32(x))
}

func (PlanType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{0}
}

// AddressType enumerates the available types of a address.
type AddressType int32

const (
	// the 32 bytes length address type of ADR 028.
	AddressType32Bytes AddressType = 0
	// the default 20 bytes length address type.
	AddressType20Bytes AddressType = 1
)

var AddressType_name = map[int32]string{
	0: "ADDRESS_TYPE_32_BYTES",
	1: "ADDRESS_TYPE_20_BYTES",
}

var AddressType_value = map[string]int32{
	"ADDRESS_TYPE_32_BYTES": 0,
	"ADDRESS_TYPE_20_BYTES": 1,
}

func (x AddressType) String() string {
	return proto.EnumName(AddressType_name, int32(x))
}

func (AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{1}
}

// Params defines the set of params for the farming module.
type Params struct {
	// private_plan_creation_fee specifies the fee for plan creation
	// this fee prevents from spamming and is collected in the community pool
	PrivatePlanCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=private_plan_creation_fee,json=privatePlanCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"private_plan_creation_fee" yaml:"private_plan_creation_fee"`
	// next_epoch_days is the epoch length in number of days
	// it updates internal state called CurrentEpochDays that is used to process
	// staking and reward distribution in end blocker
	NextEpochDays uint32 `protobuf:"varint,2,opt,name=next_epoch_days,json=nextEpochDays,proto3" json:"next_epoch_days,omitempty" yaml:"next_epoch_days"`
	// farming_fee_collector is the module account address to collect fees within the farming module
	FarmingFeeCollector string `protobuf:"bytes,3,opt,name=farming_fee_collector,json=farmingFeeCollector,proto3" json:"farming_fee_collector,omitempty" yaml:"farming_fee_collector"`
	// delayed_staking_gas_fee is used to impose gas fee for the delayed staking
	DelayedStakingGasFee github_com_cosmos_cosmos_sdk_types.Gas `protobuf:"varint,4,opt,name=delayed_staking_gas_fee,json=delayedStakingGasFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Gas" json:"delayed_staking_gas_fee" yaml:"delayed_staking_gas_fee"`
	// max_num_private_plans is the maximum number of active private plans
	MaxNumPrivatePlans uint32 `protobuf:"varint,5,opt,name=max_num_private_plans,json=maxNumPrivatePlans,proto3" json:"max_num_private_plans,omitempty" yaml:"max_num_private_plans"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// BasePlan defines a base plan type and contains the required fields
// for basic farming plan functionality. Any custom farming plan type must
// extend this type for additional functionality (for example, fixed amount plan, ratio
// plan).
type BasePlan struct {
	// id specifies index of the farming plan
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name specifies the name for the plan
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// type specifies the plan type; type 0 is public and 1 is private
	// public plan must be created through governance proposal and private plan is
	// created by account
	Type PlanType `protobuf:"varint,3,opt,name=type,proto3,enum=crescent.farming.v1beta1.PlanType" json:"type,omitempty"`
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,4,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty" yaml:"farming_pool_address"`
	// termination_address defines the Bech32-encoded address that terminates the plan
	// when the plan ends after the end time, the balance of the farming pool address
	// is transferred to the termination address
	TerminationAddress string `protobuf:"bytes,5,opt,name=termination_address,json=terminationAddress,proto3" json:"termination_address,omitempty" yaml:"termination_address"`
	// staking_coin_weights specifies the coin weights for the plan
	StakingCoinWeights github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,6,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"staking_coin_weights" yaml:"staking_coin_weights"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the plan
	EndTime time.Time `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// terminated indicates whether the plan has been terminated or not
	Terminated bool `protobuf:"varint,9,opt,name=terminated,proto3" json:"terminated,omitempty"`
	// last_distribution_time specifies the last time a distribution occurred
	LastDistributionTime *time.Time `protobuf:"bytes,10,opt,name=last_distribution_time,json=lastDistributionTime,proto3,stdtime" json:"last_distribution_time,omitempty" yaml:"last_distribution_time"`
	// distributed_coins specifies the total coins distributed by this plan
	DistributedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,11,rep,name=distributed_coins,json=distributedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed_coins" yaml:"distributed_coins"`
}

func (m *BasePlan) Reset()         { *m = BasePlan{} }
func (m *BasePlan) String() string { return proto.CompactTextString(m) }
func (*BasePlan) ProtoMessage()    {}
func (*BasePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{1}
}
func (m *BasePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasePlan.Merge(m, src)
}
func (m *BasePlan) XXX_Size() int {
	return m.Size()
}
func (m *BasePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_BasePlan.DiscardUnknown(m)
}

var xxx_messageInfo_BasePlan proto.InternalMessageInfo

// FixedAmountPlan defines a fixed amount plan that distributes a fixed amount
// of coins for every epoch.
type FixedAmountPlan struct {
	*BasePlan `protobuf:"bytes,1,opt,name=base_plan,json=basePlan,proto3,embedded=base_plan" json:"base_plan,omitempty" yaml:"base_plan"`
	// epoch_amount specifies the distributing amount for each epoch
	EpochAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=epoch_amount,json=epochAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"epoch_amount" yaml:"epoch_amount"`
}

func (m *FixedAmountPlan) Reset()         { *m = FixedAmountPlan{} }
func (m *FixedAmountPlan) String() string { return proto.CompactTextString(m) }
func (*FixedAmountPlan) ProtoMessage()    {}
func (*FixedAmountPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{2}
}
func (m *FixedAmountPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedAmountPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedAmountPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedAmountPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedAmountPlan.Merge(m, src)
}
func (m *FixedAmountPlan) XXX_Size() int {
	return m.Size()
}
func (m *FixedAmountPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedAmountPlan.DiscardUnknown(m)
}

var xxx_messageInfo_FixedAmountPlan proto.InternalMessageInfo

// RatioPlan defines a plan that distributes to farmers by ratio
// distribution for every epoch day.
type RatioPlan struct {
	*BasePlan `protobuf:"bytes,1,opt,name=base_plan,json=basePlan,proto3,embedded=base_plan" json:"base_plan,omitempty" yaml:"base_plan"`
	// epoch_ratio specifies the distributing amount by ratio
	EpochRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=epoch_ratio,json=epochRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"epoch_ratio" yaml:"epoch_ratio"`
}

func (m *RatioPlan) Reset()         { *m = RatioPlan{} }
func (m *RatioPlan) String() string { return proto.CompactTextString(m) }
func (*RatioPlan) ProtoMessage()    {}
func (*RatioPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{3}
}
func (m *RatioPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatioPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatioPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RatioPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatioPlan.Merge(m, src)
}
func (m *RatioPlan) XXX_Size() int {
	return m.Size()
}
func (m *RatioPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_RatioPlan.DiscardUnknown(m)
}

var xxx_messageInfo_RatioPlan proto.InternalMessageInfo

// Staking defines a farmer's staking information.
type Staking struct {
	Amount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	StartingEpoch uint64                                 `protobuf:"varint,2,opt,name=starting_epoch,json=startingEpoch,proto3" json:"starting_epoch,omitempty" yaml:"starting_epoch"`
}

func (m *Staking) Reset()         { *m = Staking{} }
func (m *Staking) String() string { return proto.CompactTextString(m) }
func (*Staking) ProtoMessage()    {}
func (*Staking) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{4}
}
func (m *Staking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staking.Merge(m, src)
}
func (m *Staking) XXX_Size() int {
	return m.Size()
}
func (m *Staking) XXX_DiscardUnknown() {
	xxx_messageInfo_Staking.DiscardUnknown(m)
}

var xxx_messageInfo_Staking proto.InternalMessageInfo

// QueuedStaking defines staking that is waiting in a queue.
type QueuedStaking struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueuedStaking) Reset()         { *m = QueuedStaking{} }
func (m *QueuedStaking) String() string { return proto.CompactTextString(m) }
func (*QueuedStaking) ProtoMessage()    {}
func (*QueuedStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{5}
}
func (m *QueuedStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedStaking.Merge(m, src)
}
func (m *QueuedStaking) XXX_Size() int {
	return m.Size()
}
func (m *QueuedStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedStaking.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedStaking proto.InternalMessageInfo

// TotalStakings defines the total staking amount for a staking coin denom.
type TotalStakings struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *TotalStakings) Reset()         { *m = TotalStakings{} }
func (m *TotalStakings) String() string { return proto.CompactTextString(m) }
func (*TotalStakings) ProtoMessage()    {}
func (*TotalStakings) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{6}
}
func (m *TotalStakings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalStakings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalStakings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalStakings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalStakings.Merge(m, src)
}
func (m *TotalStakings) XXX_Size() int {
	return m.Size()
}
func (m *TotalStakings) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalStakings.DiscardUnknown(m)
}

var xxx_messageInfo_TotalStakings proto.InternalMessageInfo

// HistoricalRewards defines the cumulative unit rewards for a given staking coin denom and an epoch number.
type HistoricalRewards struct {
	CumulativeUnitRewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=cumulative_unit_rewards,json=cumulativeUnitRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"cumulative_unit_rewards" yaml:"cumulative_unit_rewards"`
}

func (m *HistoricalRewards) Reset()         { *m = HistoricalRewards{} }
func (m *HistoricalRewards) String() string { return proto.CompactTextString(m) }
func (*HistoricalRewards) ProtoMessage()    {}
func (*HistoricalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{7}
}
func (m *HistoricalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRewards.Merge(m, src)
}
func (m *HistoricalRewards) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRewards proto.InternalMessageInfo

// OutstandingRewards represents outstanding (un-withdrawn) rewards
// for a staking coin denom.
type OutstandingRewards struct {
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
}

func (m *OutstandingRewards) Reset()         { *m = OutstandingRewards{} }
func (m *OutstandingRewards) String() string { return proto.CompactTextString(m) }
func (*OutstandingRewards) ProtoMessage()    {}
func (*OutstandingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{8}
}
func (m *OutstandingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutstandingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutstandingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutstandingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutstandingRewards.Merge(m, src)
}
func (m *OutstandingRewards) XXX_Size() int {
	return m.Size()
}
func (m *OutstandingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_OutstandingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_OutstandingRewards proto.InternalMessageInfo

// UnharvestedRewards represents unharvested rewards of a farmer for a
// staking coin denom, which increases when there was an automatic withdrawal
// of rewards due to changes in staked coin amount.
type UnharvestedRewards struct {
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *UnharvestedRewards) Reset()         { *m = UnharvestedRewards{} }
func (m *UnharvestedRewards) String() string { return proto.CompactTextString(m) }
func (*UnharvestedRewards) ProtoMessage()    {}
func (*UnharvestedRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_c99ee952f6ef066c, []int{9}
}
func (m *UnharvestedRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnharvestedRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnharvestedRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnharvestedRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnharvestedRewards.Merge(m, src)
}
func (m *UnharvestedRewards) XXX_Size() int {
	return m.Size()
}
func (m *UnharvestedRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_UnharvestedRewards.DiscardUnknown(m)
}

var xxx_messageInfo_UnharvestedRewards proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("crescent.farming.v1beta1.PlanType", PlanType_name, PlanType_value)
	proto.RegisterEnum("crescent.farming.v1beta1.AddressType", AddressType_name, AddressType_value)
	proto.RegisterType((*Params)(nil), "crescent.farming.v1beta1.Params")
	proto.RegisterType((*BasePlan)(nil), "crescent.farming.v1beta1.BasePlan")
	proto.RegisterType((*FixedAmountPlan)(nil), "crescent.farming.v1beta1.FixedAmountPlan")
	proto.RegisterType((*RatioPlan)(nil), "crescent.farming.v1beta1.RatioPlan")
	proto.RegisterType((*Staking)(nil), "crescent.farming.v1beta1.Staking")
	proto.RegisterType((*QueuedStaking)(nil), "crescent.farming.v1beta1.QueuedStaking")
	proto.RegisterType((*TotalStakings)(nil), "crescent.farming.v1beta1.TotalStakings")
	proto.RegisterType((*HistoricalRewards)(nil), "crescent.farming.v1beta1.HistoricalRewards")
	proto.RegisterType((*OutstandingRewards)(nil), "crescent.farming.v1beta1.OutstandingRewards")
	proto.RegisterType((*UnharvestedRewards)(nil), "crescent.farming.v1beta1.UnharvestedRewards")
}

func init() {
	proto.RegisterFile("crescent/farming/v1beta1/farming.proto", fileDescriptor_c99ee952f6ef066c)
}

var fileDescriptor_c99ee952f6ef066c = []byte{
	// 1329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xa4, 0x6e, 0x62, 0x8f, 0x49, 0xe2, 0x4c, 0x7e, 0xd4, 0x71, 0x5b, 0xaf, 0xb5, 0x12,
	0x95, 0x15, 0x14, 0xbb, 0x75, 0x04, 0x87, 0x9c, 0xc8, 0xc6, 0x4e, 0x89, 0x54, 0xa5, 0xee, 0xc6,
	0x01, 0x8a, 0x84, 0x56, 0xe3, 0xdd, 0xa9, 0xb3, 0x64, 0x7f, 0x58, 0x3b, 0xe3, 0x34, 0x3e, 0x72,
	0x40, 0xad, 0x72, 0xaa, 0x10, 0x07, 0x90, 0x88, 0x54, 0xc1, 0xad, 0x5c, 0x39, 0xf0, 0x1f, 0xd0,
	0x63, 0x05, 0x17, 0xc4, 0xc1, 0x45, 0xed, 0x7f, 0xe0, 0x23, 0x27, 0xb4, 0x33, 0xb3, 0xce, 0xb6,
	0x4d, 0x9a, 0x58, 0x2a, 0xa7, 0x64, 0xde, 0xbc, 0xf7, 0xbd, 0xef, 0xbd, 0xb7, 0xdf, 0xdb, 0x35,
	0xbc, 0x66, 0x06, 0x84, 0x9a, 0xc4, 0x63, 0x95, 0x7b, 0x38, 0x70, 0x6d, 0xaf, 0x5d, 0xd9, 0xbf,
	0xd1, 0x22, 0x0c, 0xdf, 0x88, 0xce, 0xe5, 0x4e, 0xe0, 0x33, 0x1f, 0xe5, 0x22, 0xbf, 0x72, 0x64,
	0x97, 0x7e, 0xf9, 0xb9, 0xb6, 0xdf, 0xf6, 0xb9, 0x53, 0x25, 0xfc, 0x4f, 0xf8, 0xe7, 0x17, 0x4d,
	0x9f, 0xba, 0x3e, 0x35, 0xc4, 0x85, 0x38, 0xc8, 0xab, 0x82, 0x38, 0x55, 0x5a, 0x98, 0x92, 0x61,
	0x36, 0xd3, 0xb7, 0x3d, 0x79, 0xaf, 0xb4, 0x7d, 0xbf, 0xed, 0x90, 0x0a, 0x3f, 0xb5, 0xba, 0xf7,
	0x2a, 0xcc, 0x76, 0x09, 0x65, 0xd8, 0xed, 0x08, 0x07, 0xf5, 0xb7, 0x24, 0x1c, 0x6f, 0xe0, 0x00,
	0xbb, 0x14, 0x3d, 0x01, 0x70, 0xb1, 0x13, 0xd8, 0xfb, 0x98, 0x11, 0xa3, 0xe3, 0x60, 0xcf, 0x30,
	0x03, 0x82, 0x99, 0xed, 0x7b, 0xc6, 0x3d, 0x42, 0x72, 0xa0, 0x78, 0xa1, 0x94, 0xa9, 0x2e, 0x96,
	0x65, 0xfa, 0x30, 0x61, 0x44, 0xbb, 0xbc, 0xee, 0xdb, 0x9e, 0xd6, 0x7c, 0xda, 0x57, 0x12, 0x83,
	0xbe, 0x52, 0xec, 0x61, 0xd7, 0x59, 0x55, 0x4f, 0x45, 0x52, 0x9f, 0x3c, 0x57, 0x4a, 0x6d, 0x9b,
	0xed, 0x76, 0x5b, 0x65, 0xd3, 0x77, 0x65, 0x3d, 0xf2, 0xcf, 0x32, 0xb5, 0xf6, 0x2a, 0xac, 0xd7,
	0x21, 0x94, 0x83, 0x52, 0x7d, 0x41, 0xe2, 0x34, 0x1c, 0xec, 0xad, 0x4b, 0x94, 0x0d, 0x42, 0x90,
	0x06, 0xa7, 0x3d, 0x72, 0xc0, 0x0c, 0xd2, 0xf1, 0xcd, 0x5d, 0xc3, 0xc2, 0x3d, 0x9a, 0x1b, 0x2b,
	0x82, 0xd2, 0xa4, 0x96, 0x1f, 0xf4, 0x95, 0x05, 0x41, 0xe1, 0x35, 0x07, 0x55, 0x9f, 0x0c, 0x2d,
	0xf5, 0xd0, 0x50, 0xc3, 0x3d, 0x8a, 0x9a, 0x70, 0x5e, 0x0e, 0x20, 0xe4, 0x65, 0x98, 0xbe, 0xe3,
	0x10, 0x93, 0xf9, 0x41, 0xee, 0x42, 0x11, 0x94, 0xd2, 0x5a, 0x71, 0xd0, 0x57, 0xae, 0x08, 0xa4,
	0x13, 0xdd, 0x54, 0x7d, 0x56, 0xda, 0x37, 0x08, 0x59, 0x8f, 0xac, 0xe8, 0x01, 0x80, 0x97, 0x2c,
	0xe2, 0xe0, 0x1e, 0xb1, 0x0c, 0xca, 0xf0, 0x5e, 0x18, 0xd7, 0xc6, 0x94, 0x37, 0x31, 0x59, 0x04,
	0xa5, 0xa4, 0xd6, 0x08, 0x3b, 0xf5, 0x77, 0x5f, 0xb9, 0x76, 0x8e, 0x2e, 0xdc, 0xc4, 0x74, 0xd0,
	0x57, 0x0a, 0x82, 0xc6, 0x29, 0xb0, 0xaa, 0x3e, 0x27, 0x6f, 0xb6, 0xc5, 0xc5, 0x4d, 0x4c, 0xc3,
	0x1e, 0x6d, 0xc3, 0x79, 0x17, 0x1f, 0x18, 0x5e, 0xd7, 0x35, 0xe2, 0xd3, 0xa0, 0xb9, 0x8b, 0xbc,
	0x53, 0xb1, 0xfa, 0x4e, 0x74, 0x53, 0x75, 0xe4, 0xe2, 0x83, 0xad, 0xae, 0xdb, 0x38, 0x1e, 0x01,
	0x5d, 0x4d, 0x3d, 0x7c, 0xac, 0x24, 0xbe, 0x7f, 0xac, 0x24, 0xd4, 0x1f, 0x27, 0x60, 0x4a, 0xc3,
	0x94, 0xdb, 0xd1, 0x14, 0x1c, 0xb3, 0xad, 0x1c, 0x08, 0xeb, 0xd3, 0xc7, 0x6c, 0x0b, 0x21, 0x98,
	0xf4, 0xb0, 0x4b, 0xf8, 0x50, 0xd2, 0x3a, 0xff, 0x1f, 0x7d, 0x04, 0x93, 0x61, 0x51, 0xbc, 0xbd,
	0x53, 0x55, 0xb5, 0x7c, 0x9a, 0x0c, 0xca, 0x21, 0x62, 0xb3, 0xd7, 0x21, 0x3a, 0xf7, 0x47, 0x77,
	0xe0, 0x5c, 0x34, 0x80, 0x8e, 0xef, 0x3b, 0x06, 0xb6, 0xac, 0x80, 0x50, 0xca, 0xbb, 0x99, 0xd6,
	0x94, 0x41, 0x5f, 0xb9, 0xfc, 0xea, 0x98, 0xe2, 0x5e, 0xaa, 0x8e, 0xa4, 0xb9, 0xe1, 0xfb, 0xce,
	0x9a, 0x30, 0xa2, 0xdb, 0x70, 0x96, 0x91, 0xd0, 0x2a, 0x1e, 0xcb, 0x08, 0xf1, 0x22, 0x47, 0x2c,
	0x0c, 0xfa, 0x4a, 0x5e, 0x20, 0x9e, 0xe0, 0xa4, 0xea, 0x28, 0x66, 0x8d, 0x00, 0x7f, 0x02, 0x70,
	0x2e, 0x1a, 0x4b, 0xa8, 0x3f, 0xe3, 0x3e, 0xb1, 0xdb, 0xbb, 0x8c, 0xe6, 0xc6, 0xb9, 0x6e, 0xae,
	0x9c, 0xa8, 0x9b, 0x1a, 0x31, 0xb9, 0x74, 0x74, 0x29, 0x1d, 0x59, 0xc6, 0x49, 0x38, 0xa1, 0x6a,
	0x3e, 0x38, 0xc7, 0xf3, 0x22, 0x21, 0xa9, 0x8e, 0x24, 0x4a, 0x78, 0xfa, 0x4c, 0x60, 0xa0, 0xcf,
	0x21, 0xa4, 0x0c, 0x07, 0xcc, 0x08, 0xb7, 0x40, 0x6e, 0xa2, 0x08, 0x4a, 0x99, 0x6a, 0xbe, 0x2c,
	0x56, 0x44, 0x39, 0x5a, 0x11, 0xe5, 0x66, 0xb4, 0x22, 0xb4, 0xab, 0x92, 0xd7, 0xcc, 0x90, 0x97,
	0x8c, 0x55, 0x1f, 0x3d, 0x57, 0x80, 0x9e, 0xe6, 0x86, 0xd0, 0x1d, 0xe9, 0x30, 0x45, 0x3c, 0x4b,
	0xe0, 0xa6, 0xce, 0xc4, 0xbd, 0x2c, 0x71, 0xa7, 0x05, 0x6e, 0x14, 0x29, 0x50, 0x27, 0x88, 0x67,
	0x71, 0xcc, 0x02, 0x84, 0x51, 0xa3, 0x89, 0x95, 0x4b, 0x17, 0x41, 0x29, 0xa5, 0xc7, 0x2c, 0xe8,
	0x3e, 0x5c, 0x70, 0x30, 0x65, 0x86, 0x65, 0x53, 0x16, 0xd8, 0xad, 0x2e, 0x1f, 0x12, 0x67, 0x00,
	0xcf, 0x64, 0xf0, 0xfe, 0xa0, 0xaf, 0x5c, 0x15, 0xd9, 0x4f, 0xc6, 0x10, 0x5c, 0xe6, 0xc2, 0xcb,
	0x5a, 0xec, 0x8e, 0x13, 0xfb, 0x0e, 0xc0, 0x99, 0x61, 0x00, 0xb1, 0xf8, 0x9c, 0x68, 0x2e, 0x73,
	0xd6, 0x82, 0xbc, 0x25, 0xab, 0xce, 0x49, 0x31, 0xbf, 0x8e, 0x30, 0xda, 0x62, 0xcc, 0xc6, 0xe2,
	0xb9, 0x65, 0x75, 0x32, 0x54, 0xe6, 0x1f, 0xbf, 0x2e, 0x5f, 0x0c, 0xe5, 0xb3, 0xa9, 0xfe, 0x0b,
	0xe0, 0xf4, 0x86, 0x7d, 0x40, 0xac, 0x35, 0xd7, 0xef, 0x7a, 0x8c, 0xab, 0xf4, 0x2e, 0x4c, 0x87,
	0xbc, 0xb8, 0xbe, 0xb9, 0x58, 0x33, 0x6f, 0x93, 0x61, 0x24, 0x6e, 0x2d, 0xf7, 0xac, 0xaf, 0x80,
	0x41, 0x5f, 0xc9, 0x0a, 0xe6, 0x43, 0x08, 0x55, 0x4f, 0xb5, 0xa2, 0x05, 0xf0, 0x0d, 0x80, 0xef,
	0x89, 0x5d, 0x8b, 0x79, 0xbe, 0xdc, 0xd8, 0x59, 0xfd, 0xb8, 0x29, 0xfb, 0x31, 0x2b, 0x9f, 0x82,
	0x58, 0xf0, 0x68, 0xad, 0xc8, 0xf0, 0x50, 0x51, 0xe6, 0x6a, 0x32, 0xec, 0x82, 0xfa, 0x27, 0x80,
	0x69, 0x3d, 0x14, 0xe8, 0xff, 0x5d, 0x36, 0x81, 0x22, 0xbb, 0x11, 0x84, 0xd9, 0xc4, 0xba, 0xd3,
	0x6a, 0x23, 0x2c, 0xf8, 0x1a, 0x31, 0x07, 0x7d, 0x05, 0xc5, 0x7b, 0xc0, 0xa1, 0x54, 0x1d, 0xf2,
	0x13, 0xaf, 0x42, 0x56, 0xf5, 0x03, 0x80, 0x13, 0x72, 0xc5, 0xa3, 0x0d, 0x38, 0x2e, 0x1b, 0x0d,
	0x78, 0xce, 0xf2, 0x08, 0x39, 0x37, 0x3d, 0xa6, 0xcb, 0x68, 0xf4, 0x31, 0x9c, 0xe2, 0x32, 0x0e,
	0x17, 0x0e, 0x4f, 0xc8, 0x6b, 0x48, 0x6a, 0x8b, 0x83, 0xbe, 0x32, 0x1f, 0xd3, 0xfd, 0xf0, 0x5e,
	0xd5, 0x27, 0x23, 0x03, 0x7f, 0x95, 0x4a, 0x6e, 0x5f, 0xc2, 0xc9, 0x3b, 0x5d, 0xd2, 0x1d, 0xbe,
	0x83, 0xde, 0x15, 0xc1, 0x63, 0xf8, 0xa6, 0xcf, 0xb0, 0x23, 0xd1, 0xe9, 0x3b, 0x86, 0xff, 0x1d,
	0xc0, 0x99, 0x4f, 0x6c, 0xca, 0xfc, 0xc0, 0x36, 0xb1, 0xa3, 0x93, 0xfb, 0x38, 0xb0, 0x28, 0xfa,
	0x05, 0xc0, 0x4b, 0x66, 0xd7, 0xed, 0x3a, 0x98, 0xd9, 0xfb, 0xc4, 0xe8, 0x7a, 0x36, 0x33, 0x02,
	0x71, 0x27, 0xbf, 0x87, 0xde, 0xbe, 0xd7, 0x77, 0xe4, 0x13, 0x2e, 0x5f, 0xdf, 0xa7, 0x40, 0x8d,
	0xbc, 0xda, 0xe7, 0x8f, 0x81, 0x76, 0x3c, 0x9b, 0x49, 0xb6, 0xb2, 0x92, 0x07, 0x00, 0xa2, 0xdb,
	0x5d, 0x46, 0x19, 0xf6, 0x2c, 0xdb, 0x6b, 0x47, 0xa5, 0xec, 0xc1, 0x89, 0x51, 0x98, 0xaf, 0x84,
	0xcc, 0x47, 0xe5, 0x15, 0x65, 0x90, 0x4c, 0xbe, 0x06, 0x10, 0xed, 0x78, 0xbb, 0x38, 0xd8, 0x27,
	0x94, 0x11, 0x2b, 0x62, 0x42, 0x5e, 0x67, 0xf2, 0x96, 0x15, 0x71, 0x5d, 0xd2, 0x38, 0xff, 0x2e,
	0x78, 0x95, 0xc3, 0xd2, 0xb7, 0x00, 0xa6, 0xa2, 0xaf, 0x09, 0xb4, 0x04, 0xe7, 0x1b, 0xb7, 0xd6,
	0xb6, 0x8c, 0xe6, 0xdd, 0x46, 0xdd, 0xd8, 0xd9, 0xda, 0x6e, 0xd4, 0xd7, 0x37, 0x37, 0x36, 0xeb,
	0xb5, 0x6c, 0x22, 0x3f, 0x7d, 0x78, 0x54, 0xcc, 0x44, 0x8e, 0x5b, 0xb6, 0x83, 0x4a, 0x30, 0x7b,
	0xec, 0xdb, 0xd8, 0xd1, 0x6e, 0x6d, 0xae, 0x67, 0x41, 0x1e, 0x1d, 0x1e, 0x15, 0xa7, 0x22, 0xb7,
	0x46, 0xb7, 0xe5, 0xd8, 0x26, 0x5a, 0x82, 0x33, 0x31, 0x4f, 0x7d, 0xf3, 0xd3, 0xb5, 0x66, 0x3d,
	0x3b, 0x96, 0x9f, 0x3d, 0x3c, 0x2a, 0x4e, 0x0f, 0x5d, 0xc5, 0x17, 0x54, 0x3e, 0xf9, 0xf0, 0xe7,
	0x42, 0x62, 0xa9, 0x07, 0x33, 0xf2, 0xb3, 0x81, 0xd3, 0xba, 0x01, 0xe7, 0xd7, 0x6a, 0x35, 0xbd,
	0xbe, 0xbd, 0x2d, 0x30, 0x56, 0xaa, 0x86, 0x76, 0xb7, 0x59, 0xdf, 0xce, 0x26, 0xf2, 0x0b, 0x87,
	0x47, 0x45, 0x14, 0xf3, 0x5d, 0xa9, 0x6a, 0x3d, 0x46, 0xe8, 0x1b, 0x21, 0xd5, 0xeb, 0x32, 0x04,
	0xbc, 0x11, 0x52, 0xbd, 0xce, 0x43, 0x44, 0x6a, 0xed, 0xf6, 0xd3, 0x17, 0x05, 0xf0, 0xec, 0x45,
	0x01, 0xfc, 0xf3, 0xa2, 0x00, 0x1e, 0xbd, 0x2c, 0x24, 0x9e, 0xbd, 0x2c, 0x24, 0xfe, 0x7a, 0x59,
	0x48, 0x7c, 0xf1, 0x61, 0xac, 0xc5, 0x5f, 0x11, 0x4a, 0xc9, 0x72, 0xc7, 0xf6, 0xf6, 0x5c, 0xec,
	0x2d, 0x9b, 0x01, 0xa9, 0x0c, 0x7f, 0xd9, 0x1c, 0x0c, 0x7f, 0xdb, 0xf0, 0xae, 0xb7, 0xc6, 0xf9,
	0xcb, 0x75, 0xe5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xdf, 0x00, 0x61, 0xfc, 0x0c, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNumPrivatePlans != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.MaxNumPrivatePlans))
		i--
		dAtA[i] = 0x28
	}
	if m.DelayedStakingGasFee != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.DelayedStakingGasFee))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FarmingFeeCollector) > 0 {
		i -= len(m.FarmingFeeCollector)
		copy(dAtA[i:], m.FarmingFeeCollector)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.FarmingFeeCollector)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NextEpochDays != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.NextEpochDays))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PrivatePlanCreationFee) > 0 {
		for iNdEx := len(m.PrivatePlanCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivatePlanCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BasePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributedCoins) > 0 {
		for iNdEx := len(m.DistributedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.LastDistributionTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastDistributionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDistributionTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintFarming(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x52
	}
	if m.Terminated {
		i--
		if m.Terminated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintFarming(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintFarming(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if len(m.StakingCoinWeights) > 0 {
		for iNdEx := len(m.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingCoinWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TerminationAddress) > 0 {
		i -= len(m.TerminationAddress)
		copy(dAtA[i:], m.TerminationAddress)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.TerminationAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixedAmountPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedAmountPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedAmountPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochAmount) > 0 {
		for iNdEx := len(m.EpochAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BasePlan != nil {
		{
			size, err := m.BasePlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFarming(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RatioPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatioPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RatioPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EpochRatio.Size()
		i -= size
		if _, err := m.EpochRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BasePlan != nil {
		{
			size, err := m.BasePlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFarming(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Staking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartingEpoch != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.StartingEpoch))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueuedStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TotalStakings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalStakings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalStakings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HistoricalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeUnitRewards) > 0 {
		for iNdEx := len(m.CumulativeUnitRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeUnitRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OutstandingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutstandingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutstandingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnharvestedRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnharvestedRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnharvestedRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFarming(dAtA []byte, offset int, v uint64) int {
	offset -= sovFarming(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrivatePlanCreationFee) > 0 {
		for _, e := range m.PrivatePlanCreationFee {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	if m.NextEpochDays != 0 {
		n += 1 + sovFarming(uint64(m.NextEpochDays))
	}
	l = len(m.FarmingFeeCollector)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if m.DelayedStakingGasFee != 0 {
		n += 1 + sovFarming(uint64(m.DelayedStakingGasFee))
	}
	if m.MaxNumPrivatePlans != 0 {
		n += 1 + sovFarming(uint64(m.MaxNumPrivatePlans))
	}
	return n
}

func (m *BasePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFarming(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFarming(uint64(m.Type))
	}
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	l = len(m.TerminationAddress)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.StakingCoinWeights) > 0 {
		for _, e := range m.StakingCoinWeights {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFarming(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovFarming(uint64(l))
	if m.Terminated {
		n += 2
	}
	if m.LastDistributionTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDistributionTime)
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.DistributedCoins) > 0 {
		for _, e := range m.DistributedCoins {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func (m *FixedAmountPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasePlan != nil {
		l = m.BasePlan.Size()
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.EpochAmount) > 0 {
		for _, e := range m.EpochAmount {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func (m *RatioPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasePlan != nil {
		l = m.BasePlan.Size()
		n += 1 + l + sovFarming(uint64(l))
	}
	l = m.EpochRatio.Size()
	n += 1 + l + sovFarming(uint64(l))
	return n
}

func (m *Staking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovFarming(uint64(l))
	if m.StartingEpoch != 0 {
		n += 1 + sovFarming(uint64(m.StartingEpoch))
	}
	return n
}

func (m *QueuedStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovFarming(uint64(l))
	return n
}

func (m *TotalStakings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovFarming(uint64(l))
	return n
}

func (m *HistoricalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeUnitRewards) > 0 {
		for _, e := range m.CumulativeUnitRewards {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func (m *OutstandingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func (m *UnharvestedRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func sovFarming(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFarming(x uint64) (n int) {
	return sovFarming(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivatePlanCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivatePlanCreationFee = append(m.PrivatePlanCreationFee, types.Coin{})
			if err := m.PrivatePlanCreationFee[len(m.PrivatePlanCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochDays", wireType)
			}
			m.NextEpochDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingFeeCollector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingFeeCollector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedStakingGasFee", wireType)
			}
			m.DelayedStakingGasFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayedStakingGasFee |= github_com_cosmos_cosmos_sdk_types.Gas(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumPrivatePlans", wireType)
			}
			m.MaxNumPrivatePlans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumPrivatePlans |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PlanType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoinWeights = append(m.StakingCoinWeights, types.DecCoin{})
			if err := m.StakingCoinWeights[len(m.StakingCoinWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Terminated = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDistributionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastDistributionTime == nil {
				m.LastDistributionTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastDistributionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributedCoins = append(m.DistributedCoins, types.Coin{})
			if err := m.DistributedCoins[len(m.DistributedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedAmountPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedAmountPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedAmountPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasePlan == nil {
				m.BasePlan = &BasePlan{}
			}
			if err := m.BasePlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochAmount = append(m.EpochAmount, types.Coin{})
			if err := m.EpochAmount[len(m.EpochAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatioPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatioPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatioPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasePlan == nil {
				m.BasePlan = &BasePlan{}
			}
			if err := m.BasePlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingEpoch", wireType)
			}
			m.StartingEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalStakings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalStakings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalStakings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeUnitRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeUnitRewards = append(m.CumulativeUnitRewards, types.DecCoin{})
			if err := m.CumulativeUnitRewards[len(m.CumulativeUnitRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutstandingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutstandingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutstandingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnharvestedRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnharvestedRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnharvestedRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFarming(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFarming
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFarming
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFarming
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFarming        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFarming          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFarming = fmt.Errorf("proto: unexpected end of group")
)
