// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/referral/v1beta1/referral.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Referral struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr   string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Tier   uint64 `protobuf:"varint,5,opt,name=tier,proto3" json:"tier,omitempty"`
}

func (m *Referral) Reset()         { *m = Referral{} }
func (m *Referral) String() string { return proto.CompactTextString(m) }
func (*Referral) ProtoMessage()    {}
func (*Referral) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ce64a9d1383f4a0, []int{0}
}
func (m *Referral) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Referral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Referral.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Referral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Referral.Merge(m, src)
}
func (m *Referral) XXX_Size() int {
	return m.Size()
}
func (m *Referral) XXX_DiscardUnknown() {
	xxx_messageInfo_Referral.DiscardUnknown(m)
}

var xxx_messageInfo_Referral proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Referral)(nil), "crescent.referral.v1beta1.Referral")
}

func init() {
	proto.RegisterFile("crescent/referral/v1beta1/referral.proto", fileDescriptor_1ce64a9d1383f4a0)
}

var fileDescriptor_1ce64a9d1383f4a0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x40, 0xe3, 0x10, 0x2a, 0xf0, 0xc0, 0x60, 0x21, 0x64, 0x18, 0xac, 0x8a, 0x29, 0x4b, 0x63,
	0x55, 0x48, 0x1c, 0x80, 0x23, 0x44, 0x4c, 0x6c, 0x8e, 0xfd, 0x09, 0x06, 0x6a, 0x47, 0x3f, 0x06,
	0xc1, 0x2d, 0x38, 0x56, 0xc7, 0x8e, 0x8c, 0x90, 0x5c, 0x04, 0xd9, 0x0d, 0xe9, 0xf6, 0xfc, 0xfc,
	0x6c, 0xe9, 0x7f, 0x5a, 0x6a, 0x84, 0x5e, 0x83, 0x0b, 0x12, 0xe1, 0x11, 0x10, 0xd5, 0xab, 0x7c,
	0x5f, 0x37, 0x10, 0xd4, 0x7a, 0x16, 0x55, 0x87, 0x3e, 0x78, 0x76, 0xf9, 0x5f, 0x56, 0xf3, 0xc5,
	0x54, 0x5e, 0x9d, 0xb7, 0xbe, 0xf5, 0xa9, 0x92, 0x91, 0xf6, 0x0f, 0xae, 0x1d, 0x3d, 0xa9, 0xa7,
	0x92, 0x9d, 0xd1, 0xdc, 0x1a, 0x4e, 0x96, 0xa4, 0x2c, 0xea, 0xdc, 0x1a, 0xc6, 0x68, 0xa1, 0x8c,
	0x41, 0x9e, 0x2f, 0x49, 0x79, 0x5a, 0x27, 0x8e, 0x4e, 0x7b, 0x03, 0xfc, 0x68, 0xef, 0x22, 0xb3,
	0x0b, 0xba, 0xe8, 0x14, 0x82, 0x0b, 0xbc, 0x48, 0x76, 0x3a, 0xc5, 0x36, 0x58, 0x40, 0x7e, 0x9c,
	0x7e, 0x4c, 0x7c, 0x77, 0xbf, 0xfd, 0x15, 0xd9, 0x76, 0x10, 0x64, 0x37, 0x08, 0xf2, 0x33, 0x08,
	0xf2, 0x35, 0x8a, 0x6c, 0x37, 0x8a, 0xec, 0x7b, 0x14, 0xd9, 0xc3, 0x6d, 0x6b, 0xc3, 0xd3, 0x5b,
	0x53, 0x69, 0xbf, 0x91, 0xcf, 0xd0, 0xf7, 0xb0, 0xea, 0xac, 0x7b, 0xd9, 0x28, 0xb7, 0xd2, 0x08,
	0x72, 0xde, 0xc2, 0xc7, 0x61, 0x0f, 0xe1, 0xb3, 0x83, 0xbe, 0x59, 0xa4, 0x61, 0x6e, 0xfe, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf7, 0x27, 0xdf, 0x1d, 0x29, 0x01, 0x00, 0x00,
}

func (m *Referral) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Referral) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Referral) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tier != 0 {
		i = encodeVarintReferral(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintReferral(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintReferral(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintReferral(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReferral(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReferral(dAtA []byte, offset int, v uint64) int {
	offset -= sovReferral(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Referral) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReferral(uint64(m.Id))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovReferral(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovReferral(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovReferral(uint64(l))
	}
	if m.Tier != 0 {
		n += 1 + sovReferral(uint64(m.Tier))
	}
	return n
}

func sovReferral(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReferral(x uint64) (n int) {
	return sovReferral(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Referral) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReferral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Referral: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Referral: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReferral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReferral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferral
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReferral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReferral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReferral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReferral(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReferral
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReferral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReferral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReferral
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReferral
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReferral
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReferral        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReferral          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReferral = fmt.Errorf("proto: unexpected end of group")
)
